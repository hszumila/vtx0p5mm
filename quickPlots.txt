TCut cut1 = "eleHasL1&&posHasL1&&eleHasL2&&posHasL2&&eleClY*posClY<0&&uncP>0.845&&isPair1&&max(eleTrkChisq,posTrkChisq)<30&&eleP<0.75*1.056&&min(eleMinPositiveIso+0.5*(eleTrkZ0-5*elePY/eleP)*sign(elePY),posMinPositiveIso+0.5*(posTrkZ0-5*posPY/posP)*sign(posPY))>0&&bscChisq<10&&bscChisq-uncChisq<5&&uncP<1.15*1.056&&max(eleMatchChisq,posMatchChisq)<10&&abs(eleClT-eleTrkT-43)<4&&abs(posClT-posTrkT-43)<4&&abs(eleP-posP)/(eleP+posP)<0.4&&posTrkD0<1.5&&(posMaxHitsShared<5&&eleMaxHitsShared<5)&&abs(eleClT-posClT)<2";

TCut cut2 = "eleHasL1&&posHasL1&&eleHasL2&&posHasL2&&eleClY*posClY<0&&uncP>0.845&&isPair1";

TH1F *h1 = new TH1F("h1",";2 cluster time difference [ns]",200,-9,9);
TH1F *h2 = new TH1F("h2",";2 cluster time difference [ns]",200,-9,9);
TH1F *hr = new TH1F("hr",";2 cluster time difference [ns]",200,-9,9);
ntuple->Draw("eleClT-posClT>>h1",cut1);
ntuple->Draw("eleClT-posClT>>h2",cut2);
hr->Divide(h2,h1,1,1,"b");
hr->Draw()


h_all->SetContour();
h_all->SetMaximum();


TCut cut1 = "((eleHasL1&&!posHasL1&&abs(posFirstHitY-100*posPY/posP)<1.5)||(posHasL1&&!eleHasL1&&abs(eleFirstHitY-100*elePY/eleP)<1.5))&&eleHasL2&&posHasL2&&uncP>0.845&&isPair1&&eleHasL2&&posHasL2&&eleClY*posClY<0&&uncP>0.845&&isPair1&&max(eleTrkChisq,posTrkChisq)<30&&eleP<0.75*1.056&&min(eleMinPositiveIso+0.5*(eleTrkZ0-5*elePY/eleP)*sign(elePY),posMinPositiveIso+0.5*(posTrkZ0-5*posPY/posP)*sign(posPY))>0&&bscChisq<10&&bscChisq-uncChisq<5&&uncP<1.15*1.056&&max(eleMatchChisq,posMatchChisq)<10&&abs(eleClT-eleTrkT-43)<4&&abs(posClT-posTrkT-43)<4&&abs(eleP-posP)/(eleP+posP)<0.4&&posTrkD0<1.5&&(posMaxHitsShared<5&&eleMaxHitsShared<5)&&abs(eleClT-posClT)<2";


TH2F *hr = new TH2F("hr","reach combined",198,0,0.1,400,1E-10,4E-8);
hr->Divide(2.303,h_all,1,1,"b");
hr->Draw()
